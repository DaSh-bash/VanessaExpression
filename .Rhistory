cand_genes_adult_he_best_list <- c("Vcard_DToL04426","Vcard_DToL05110","Vcard_DToL06375","Vcard_DToL09542")
cand_genes_adult_he_best <- functional_annotation[is.element(functional_annotation$GeneID,cand_genes_adult_ab_best_list),]
cand_genes_adult_he_best
cand_genes_adult_he_top <-c(row.names(res05hef2topUp),row.names(res05hef2topDown))
length(cand_genes_adult_he_top)
#par(mfrow=c(2,3))
#for (x in cand_genes_adult_he_top) {
#  plotCounts(ddsLRhef2, gene=x, intgroup="condition")
#}
###### PLOTTING CANDIDATE GENES #######
par(mfrow=c(1,2))
#plotCounts(ddsLRhef2, gene="Vcard_DToL07064", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL09601", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL01495", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL01126", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL02425", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL02971", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL04426", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL05110", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL06375", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL09542", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL11161", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL13323", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL13698", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL14898", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL17591", intgroup="condition")
cand_genes_adult_he_best_list <- c("Vcard_DToL04426","Vcard_DToL05110","Vcard_DToL06375","Vcard_DToL09542")
cand_genes_adult_he_best <- functional_annotation[is.element(functional_annotation$GeneID,cand_genes_adult_he_best_list),]
cand_genes_adult_he_best
cand_genes_adult_he_top <-c(row.names(res05hef2topUp),row.names(res05hef2topDown))
length(cand_genes_adult_he_top)
#par(mfrow=c(2,3))
#for (x in cand_genes_adult_he_top) {
#  plotCounts(ddsLRhef2, gene=x, intgroup="condition")
#}
###### PLOTTING CANDIDATE GENES #######
par(mfrow=c(1,2))
#plotCounts(ddsLRhef2, gene="Vcard_DToL07064", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL09601", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL01495", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL01126", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL02425", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL02971", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL04426", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL05110", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL06375", intgroup="condition")
plotCounts(ddsLRhef2, gene="Vcard_DToL09542", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL11161", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL13323", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL13698", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL14898", intgroup="condition")
#plotCounts(ddsLRhef2, gene="Vcard_DToL17591", intgroup="condition")
cand_genes_adult_he_best_list <- c("Vcard_DToL04426","Vcard_DToL01495","Vcard_DToL06375","Vcard_DToL09542")
cand_genes_adult_he_best <- functional_annotation[is.element(functional_annotation$GeneID,cand_genes_adult_he_best_list),]
cand_genes_adult_he_best
intersect(res05hef2topUp,res05hef2topDown)
#intersect(res05hef2topUp,res05hef2topDown)
res05hef2topUp
intersect(row.names(res05hef2topUp),row.names(res05hef2topDown))
res05hef2topUp
intersect(row.names(res05hef2topUp),row.names(res05hef2topDown))
#res05hef2topUp
intersect(row.names(res05hef2topUp),row.names(res05hef2topDown))
intersect(row.names(res05ab2topUp),row.names(res05hef2topDown))
intersect(row.names(res05hef2topUp),row.names(res05hef2topDown))
intersect(row.names(res05abtopUp),row.names(res05hef2topDown))
intersect(row.names(res05hef2topUp),row.names(res05hef2topDown))
intersect(row.names(res05abftopUp),row.names(res05hef2topDown))
#res05hef2topUp
length(row.names(res05hef2topDown))
length(row.names(res05hef2topUp))
length(row.names(res05abtopDown))
length(row.names(res05hef2topDown))
length(row.names(res05hef2topUp))
length(row.names(res05abftopDown))
length(row.names(res05abftopUp))
# "Downregulated in heads and abdomens with limited resource"
intersect(row.names(res05hef2topDown),row.names(res05abftopDown))
# Upregulated in heads and abdomens with limited resource
intersect(row.names(res05abftopUp),row.names(res05hef2topUp))
# Downregulated in heads, upregulated in abdomens with limited resource
intersect(row.names(res05abftopUp),row.names(res05hef2topDown))
#Upregulated in heads, downregulated in abdomens with limited resource
intersect(row.names(res05abftopDown),row.names(res05hef2topUp))
#res05hef2topUp
library(topGO)
library(ggplot2)
c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
#write.csv(res05hef2topDownfun,file="cand_genes_adult_he_topDown.tsv",row.names=T)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
#write.csv(res05hef2topDownfun,file="cand_genes_adult_he_topDown.tsv",row.names=T)
candidate_genes <- read.table("resLTR105filtr.tsv", header = F)
#candidate_genes <- read.table("resLTR105filtr.tsv", header = F)
colnames(cand_adult_all) <- "geneid"
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names=T)
cand_adult_all
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names=F, header=F)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names=F)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names=F,col.names = FALSE)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names=F, col.names = F)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
candidate_genes <- read.table("cand_genes_adult_topGOclean.tsv", header = F)
colnames(candidate_genes) <- "geneid"
#cand_adult_all
#head(candidate_genes)
#candidate_genes <- as.character(candidate_genes$geneid)
#geneList <- factor(as.integer(geneNames %in% candidate_genes))
#names(geneList) <- geneNames
#head(geneList)
##Biological function
#create the topGOdata object
#GO_dataLTR_BP <- new("topGOdata",
#               ontology="BP",
#               allGenes=geneList,
#               annot=annFUN.gene2GO,
#               gene2GO=geneID2GO,
#               nodeSize=1)
candidate_genes
candidate_genes <- read.table("cand_genes_adult_topGOclean.tsv", header = F)
colnames(candidate_genes) <- "geneid"
#cand_adult_all
#head(candidate_genes)
candidate_genes <- as.character(candidate_genes$geneid)
geneList <- factor(as.integer(geneNames %in% candidate_genes))
names(geneList) <- geneNames
head(geneList)
##Biological function
#create the topGOdata object
GO_dataLTR_BP <- new("topGOdata",
ontology="BP",
allGenes=geneList,
annot=annFUN.gene2GO,
gene2GO=geneID2GO,
nodeSize=1)
candidate_genes <- read.table("cand_genes_adult_topGOclean.tsv", header = F)
colnames(candidate_genes) <- "geneid"
#cand_adult_all
#head(candidate_genes)
candidate_genes <- as.character(candidate_genes$geneid)
geneList <- factor(as.integer(geneNames %in% candidate_genes))
names(geneList) <- geneNames
head(geneList)
##Biological function
#create the topGOdata object
GO_dataAdult_BP <- new("topGOdata",
ontology="BP",
allGenes=geneList,
annot=annFUN.gene2GO,
gene2GO=geneID2GO,
nodeSize=1)
GO_dataAdult_BP
allGO = usedGO(object = GO_dataAdult_BP)
adul_resultFisher_weight01 <- runTest(GO_dataAdult_BP, algorithm = "weight01", statistic = "fisher")
#BP_resultFisher_classic <- runTest(GO_dataLTR_BP, algorithm = "classic", statistic = "fisher")
#BP_resultFisher_classic
#BP_resultFisher_parentChild <- runTest(GO_dataLTR_BP, algorithm = "parentChild", statistic = "fisher")
#BP_resultFisher_parentChild
#BP_resultFisher_elim <- runTest(GO_dataLTR_BP, algorithm = "elim", statistic = "fisher")
#BP_resultFisher_elim
allGO = usedGO(object = GO_dataAdult_BP)
allResAdult_BP <- GenTable(GO_dataAdult_BP,
weight01Fisher = BP_resultFisher_weight01,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allResLTR_BP$weight01Fisher <- as.numeric(allResLTR_BP$weight01Fisher)
allResAdult_BP
allResLTR_BP[allResLTR_BP$weight01Fisher<=0.05, ]
allResAdult_BP$weight01Fisher <- as.numeric(allResAdult_BP$weight01Fisher)
allResAdult_BP[allResAdult_BP$weight01Fisher<=0.05, ]
allResAdult_BP$p_adj <- p.adjust(allResAdult_BP$weight01Fisher, method = "fdr")
allResAdult_BP$p_adj_fdr <- p.adjust(allResAdult_BP$weight01Fisher, method = "fdr")
allResAdult_BP$p_adj_holm <- p.adjust(allResAdult_BP$weight01Fisher, method = "holm")
allResAdult_BP$p_adj_bonferroni <- p.adjust(allResAdult_BP$weight01Fisher, method = "bonferroni")
allResAdult_BP$p_adj_BH <- p.adjust(allResAdult_BP$weight01Fisher, method = "BH")
allResAdult_BP
topGOAdult_BP <- allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ]
nrow(allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ])
topGOAdult_BP$GO_descr <- paste(topGOAdult_BP$Term," (",topGOAdult_BP$GO.ID,")", sep = "")
plot_topGoAdult=ggplot(topGOAdult_BP, aes(x=reorder(GO_descr, -Significant), y=Significant)) + geom_bar(stat="identity", fill="#062A79") +
theme(panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
axis.line = element_line(size = 0.2, colour = "black"),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 8, angle = 90, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 8, angle = 90),
legend.title = element_blank(),
legend.text = element_text(size = 8, angle = 90, vjust = 0.5),
legend.position = "top",
axis.ticks = element_line(colour = "black", size = 0.1))
#ggsave(plot = plot_topGo, "topGOLTR_BP.pdf")
plot_topGoAdult
topGOAdult_BP <- allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ]
nrow(allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ])
topGOAdult_BP$GO_descr <- paste(topGOAdult_BP$Term," (",topGOAdult_BP$GO.ID,")", sep = "")
plot_topGoAdult=ggplot(topGOAdult_BP, aes(x=reorder(GO_descr, -Significant), y=Significant)) + geom_bar(stat="identity", fill="#062A79") +
theme(panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
axis.line = element_line(size = 0.2, colour = "black"),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 8, angle = 90, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 8, angle = 90),
legend.title = element_blank(),
legend.text = element_text(size = 8, angle = 90, vjust = 0.5),
legend.position = "top",
axis.ticks = element_line(colour = "black", size = 0.1))
ggsave(plot = plot_topGoAdult, "topGOAdult_BP.pdf")
plot_topGoAdult
topGOAdult_BP <- allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ]
nrow(allResAdult_BP[allResAdult_BP$weight01Fisher<=0.01, ])
topGOAdult_BP$GO_descr <- paste(topGOAdult_BP$Term," (",topGOAdult_BP$GO.ID,")", sep = "")
plot_topGoAdult=ggplot(topGOAdult_BP, aes(x=reorder(GO_descr, -Significant), y=Significant)) + geom_bar(stat="identity", fill="#512887") +
theme(panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
axis.line = element_line(size = 0.2, colour = "black"),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 8, angle = 90, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 8, angle = 90),
legend.title = element_blank(),
legend.text = element_text(size = 8, angle = 90, vjust = 0.5),
legend.position = "top",
axis.ticks = element_line(colour = "black", size = 0.1))
ggsave(plot = plot_topGoAdult, "topGOAdult_BP.pdf")
plot_topGoAdult
View(fun_ann2)
# get the necessary information from the eggNOG output file
fun_ann2 <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/vcard.func.annot.csv",header = FALSE)
#get columns 1 (query) and 9 (KO terms)
kegg_data2 <- fun_ann2[c(1,13)]
kegg_data2
# clean up by removing the "ko:" in front of every KO term
kegg_data2$KEGG.KO <- kegg_data2$V13
kegg_data2$Query <- gsub( "-RA", "", as.character(kegg_data2$V1))
kegg_data2
# expand, since some genes/proteins will have multiple assigned KO terms
kegg2 <- data.table(kegg_data2)
kegg2 <- kegg2[, list(KEGG.KO = unlist(strsplit(KEGG.KO, ","))), by = Query]
kegg2_final <- kegg2[,c(2,1)]
kegg2_final
# select the needed columns
#kegg_final <- kegg[,c(2,1)]
# finally you need a list of gene/protein names of interest (only the     # identifiers). Here, this is called protein_ids. It can be a vector or a # column in a data.frame. This can be a list of differentially expressed   # genes or the genes present in a cluster of module that is experimentall # interesting to you.
library(topGO)
library(ggplot2)
library(DESeq2)
library(apeglm)
library("clusterProfiler")
library("enrichplot")
library("data.table")
?p.adjust.methods
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
enr_resAdult <- enricher(cand_adult_all, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
library(topGO)
library(ggplot2)
library(DESeq2)
library(apeglm)
library("clusterProfiler")
library("enrichplot")
library("data.table")
### KEGG data prep
# get the necessary information from the eggNOG output file
fun_ann2 <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/vcard.func.annot.csv",header = FALSE)
#get columns 1 (query) and 9 (KO terms)
kegg_data2 <- fun_ann2[c(1,13)]
kegg_data2
# clean up by removing the "ko:" in front of every KO term
kegg_data2$KEGG.KO <- kegg_data2$V13
kegg_data2$Query <- gsub( "-RA", "", as.character(kegg_data2$V1))
kegg_data2
# expand, since some genes/proteins will have multiple assigned KO terms
kegg2 <- data.table(kegg_data2)
kegg2 <- kegg2[, list(KEGG.KO = unlist(strsplit(KEGG.KO, ","))), by = Query]
kegg2_final <- kegg2[,c(2,1)]
kegg2_final
# select the needed columns
#kegg_final <- kegg[,c(2,1)]
# finally you need a list of gene/protein names of interest (only the     # identifiers). Here, this is called protein_ids. It can be a vector or a # column in a data.frame. This can be a list of differentially expressed   # genes or the genes present in a cluster of module that is experimentall # interesting to you.
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
enr_resAdult <- enricher(cand_adult_all, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
cand_adult_all <- c(row.names(res05hef2topUp),row.names(res05hef2topDown),row.names(res05abftopDown),row.names(res05abftopUp))
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
cand_adult_all_load
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv") #,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
#enr_resAdult <- enricher(cand_adult_all, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
cand_adult_all_load
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv", row.names = F) #,header = FALSE)
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv") #,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
cand_adult_all_load
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read_tsv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv") #,header = FALSE)
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",transpose = FALSE, rownames_included = TRUE)
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
#enr_resAdult <- enricher(cand_adult_all_load, TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
enr_resAdult
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.05, minGSSize = 1)
enr_resAdult
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg2_final, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
enr_resAdult
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
kegg2_final
kegg2_final[- grep("map", kegg2_final$Name),]
kegg2_final[- grep("map", kegg2_final$KEGG.KO),]
length(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
nrows(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
kegg_KOterms <- nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
kegg_KOterms <- nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg_KOterms, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
kegg_KOterms
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
kegg_KOterms <- kegg2_final[- grep("map", kegg2_final$KEGG.KO),]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg_KOterms, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
enr_resAdult
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
kegg_KOterms <- kegg2_final[- grep("map", kegg2_final$KEGG.KO),]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg_KOterms, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
enr_resAdult$ID
#enr_res2$ID
# write the results of the analysis
#write.table(enr_res2, file = "c2_KOEnr_results.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
#tiff(file="KO_dotplotLRT32.tiff",width=6, height=4, units="in", res=1200)
#dotplot(enr_res2, showCategory=30)
#dev.off()
#special_genesLRTHDLD <- c(special_genesLTR105,special_genesLTR305)
#genesLRTHDLD <- sort(special_genesLRTHDLD, decreasing = TRUE)
#genesLRTHDLD <- genesLRTHDLD[!duplicated(genesLRTHDLD)]
cand_adult_all_load <- read.csv(file ="/Users/dshipilina/GitHub/VanessaExpression/cand_genes_adult_topGO.tsv",head=FALSE, sep=";")
cand_adult_all_load[-1,]
nrow(kegg2_final[- grep("map", kegg2_final$KEGG.KO),])
kegg_KOterms <- kegg2_final[- grep("map", kegg2_final$KEGG.KO),]
#,header = FALSE)
#write.csv(cand_adult_all,file="cand_genes_adult_topGO.tsv",row.names = F)
enr_resAdult <- enricher(cand_adult_all_load[-1,], TERM2GENE=kegg_KOterms, pvalueCutoff = 0.05, pAdjustMethod = "fdr", qvalueCutoff = 0.2, minGSSize = 1)
enr_resAdult$ID
#enr_res2$ID
# write the results of the analysis
write.table(enr_resAdult, file = "enr_resAdult.csv") # write table
# make a simple dot plot of the results and save it as a .tiff file
tiff(file="KO_dotplotAdult.tiff",width=6, height=4, units="in", res=1200)
dotplot(enr_resAdult, showCategory=30)
dev.off()
kegg_KOterms
